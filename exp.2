Introduction to Maven 
Maven is a powerful build automation and project management tool primarily used for Java projects. 
It simplifies the build process by: 
• Enforcing a standard project structure (convention over configuration). 
• Managing dependencies automatically by downloading them from remote repositories (e.g., Maven Central).
 • Defining a clear build lifecycle (compile, test, package, install, deploy). 
• Allowing the integration of various plugins to extend functionality (e.g., testing, reporting).

 Creating a Maven Project 

Step-by-Step Process
 
Step 1: Open Your IntelliJ Idea App, make sure you have Maven installed (refer to Experiment 1). 
Step 2: Use Maven Archetype to Generate a New Project Maven comes with a set of archetypes that provide you with a standard project template.
File  new project  maven archetype  firstPOMfile  select maven-archetype-QuickStart  create

• groupId: Uniquely identifies your project’s group (like a package name). 
• artifactId: The name of your project (the resulting artifact). 
• maven-archetype-quickstart: A simple archetype that sets up a basic Java project with a sample unit test. 
Maven Project Layout and Components 
After generating the project, you will notice the following standard Maven directory structure:
 
Explanation of Key Components
•	pom.xml: The Project Object Model (POM) file is the core of any Maven project. It contains configuration details such as project coordinates (groupId, artifactId, version), dependencies, plugins, and build settings.
•	src/main/java: This directory holds the source code of your application. In our example, the package structure com.example is created, and you have an App.java file.
•	src/test/java: This directory is for your test cases. The default example includes a basic test class, AppTest.java.


<!-- Properties: Customize Java version or plugin versions --> 
<properties> 
<maven.compiler.source>11</maven.compiler.source> 
<maven.compiler.target>11</maven.compiler.target> 
</properties> 

<!-- Dependencies --> 
<dependencies> 
<!-- Example: JUnit dependency for testing -->
<dependency> 
<groupId>junit</groupId> 
<artifactId>junit</artifactId> 
<version>4.13.2</version> 
<scope>test</scope> 
</dependency> 
</dependencies> 

<!-- Build: Configuring plugins and build settings --> 
<build> 
<plugins> 
<!-- Example: Maven Compiler Plugin to compile Java code --> 
<plugin> 
<groupId>org.apache.maven.plugins</groupId> 
<artifactId>maven-compiler-plugin</artifactId> 
<version>3.8.1</version> 
<configuration> 
<source>1.6</source> 
<target>1.6</target> 
</configuration> 
</plugin> 
<!-- Example: Maven Surefire Plugin to run tests --> 
<plugin> 
<groupId>org.apache.maven.plugins</groupId> 
<artifactId>maven-surefire-plugin</artifactId> 
<version>2.22.2</version> 
</plugin> 
</plugins> 
</build> 
</project>


Example Dependency To add a dependency for JUnit, include the following snippet in your <dependencies> section:

<dependency> 
<groupId>junit</groupId> 
<artifactId>junit</artifactId> 
<version>4.13.2</version> 
<scope>test</scope> 
</dependency> 

• groupId, artifactId, version: These three elements uniquely identify the dependency.  
• scope: The test scope ensures that this dependency is only available during the test 
phase and not included in the final artifact.


Common Maven Commands
 
•	Compile the Project: 
mvn compile 
•	Run Unit Tests: 
mvn test
•	Package the Application: 
mvn package 
This command compiles, tests, and packages your code into a JAR file located in the 
target directory. 
•	Clean the Project: 
mvn clean 
This removes any files generated by previous builds.


Pom.xml(firstPOMfile)
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>


  <groupId>org.example</groupId>
  <artifactId>firstPOMfile</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>firstPOMfile</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <!-- Compiler Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
  </configuration>
      </plugin>

      <!-- Jar Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>org.example.App</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

    </plugins>
  
</build>
</project>

In Terminal execute these commands

mvn clean compile
mvn package
java -jar .\target\firstPOMfile-1.0-SNAPSHOT.jar

Output
Hello world!
