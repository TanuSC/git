1.	Jenkins is an open-source automation server used for:
âœ… Continuous Integration (CI) â€“ Automatically testing and integrating code changes 
âœ… Continuous Deployment (CD) â€“ Automating application deployment 
âœ… Building Pipelines â€“ Managing end-to-end software development workflows 
âœ… Plugin-Based Extensibility â€“ Supporting tools like Maven, Gradle, Ansible, Docker,    and Azure DevOps 

2.	Why Use Jenkins?
 	âœ” Automates builds and tests 
     âœ” Reduces manual intervention
           âœ” Improves software quality
           âœ” Works with multiple tools and platforms 

3.	Installing Jenkins: Jenkins can be installed using multiple methods -
ó¾ ® Windows Installer (.msi) â€“ Recommended for Windows
ó¾ ¯ Linux Package Manager â€“ Best for Linux Users
ó¾ ° Jenkins WAR File â€“ Universal method using Java

Steps to install Jenkins in windows

âœ… Step 1: Download Jenkins 
ðŸ”— Download from: Download and deploy Choose Windows Installer (.msi) for an easy setup.

 âœ… Step 2: Install Jenkins 
ó¾ ® Run the downloaded .msi file. 
ó¾ ¯ Follow the installation wizard. 
ó¾ ° Select Run Jenkins as a Windows Service (recommended). 
ó¾ ± Choose the installation directory (default: C:\Program Files\Jenkins ). 
ó¾ ² Click Install and wait for the setup to complete. 

âœ… Step 3: Start Jenkins
 ó¾ ® Open Services ( services.msc ) and ensure Jenkins is running. 
 ó¾ ¯ Open a web browser and go to: 1 http://localhost:8080 
 
âœ… Step 4: Unlock Jenkins
 	ó¾ ® Find the initial Admin Password in: 
1. C:\Program Files\Jenkins\secrets\initialAdminPassword 
2. Copy the password and paste it into the Jenkins setup page. 


âœ… Step 5: Install Recommended Plugins Jenkins will prompt you to install plugins. 
Click "Install Suggested Plugins".

 âœ… Step 6: Create Admin User 
ó¾ ® Set up a Username, Password, and Email.
ó¾ ¯ Click Save and Finish. 

Jenkins is now ready!  Access it anytime at: 1 http://localhost:8080

Configuring Jenkins for First Use 
âœ… Understanding the Jenkins Dashboard After logging in, you will see: 
ðŸ”¹ New Item â†’ Create Jobs/Pipelines
ðŸ”¹ Manage Jenkins â†’ Configure System, Users, and Plugins 
ðŸ”¹ Build History â†’ View previous builds 
ðŸ”¹ Credentials â†’ Store secure authentication details
 âœ… Installing Additional Plugins Jenkins supports plugins for various tools like Maven, Gradle, Docker, and Azure DevOps. 
ðŸ”¹ To install a plugin: 
ó¾ ® Go to Manage Jenkins â†’ Manage Plugins
 	ó¾ ¯ Search for the required plugin 
ó¾ ° Click Install without Restart 
 âœ… Setting Up Global Tool Configuration Configure Java, Maven, and Gradle in Jenkins: 
ó¾ ® Go to Manage Jenkins â†’ Global Tool Configuration 
ó¾ ¯ Add paths for: JDK ( C:\Program Files\Java\jdk-17 ) 
Maven ( C:\Maven\apache-maven-   ) Gradle ( C:\Gradle\gradle- ) 
ó¾ ° Click Save

Continuous Integration with Jenkins

1. Configuring Jenkins & Git Integration
 Step 1: Verify Git Installation in Jenkins 
1. Open Jenkins Dashboard â†’ Manage Jenkins â†’ Global Tool Configuration.
            2. Under Git, verify the installation path (e.g., C:\Program Files\Git\bin\git.exe ). 
            3. Click Save. 
Step 2: Add GitHub Credentials in Jenkins
 1. Navigate to Manage Jenkins â†’ Manage Credentials. 
 2. Select Global credentials (unrestricted) â†’ Click Add Credentials. 
 3. Choose Username with password or SSH Key, provide details, and click OK

2. Running a Selenium Java Test from a Local Maven Project 
Step 1: Create a New Jenkins Job 
1. Go to Jenkins Dashboard â†’ Click New Item. 
2. Enter a project name â†’ Select Freestyle Project.
            3. Click OK.


Step 2: Configure the Build Step
 1. Scroll to Build â†’ Click Add build step â†’ Execute Windows Batch Command. 
 2. Enter the following commands (ensure correct navigation to project directory): 
1 cd D:\Idea Projects\MVNGRDLDEMO
2 mvn test 
3 Click Save â†’ Click Build Now to execute the test.
 3. Running Selenium Tests from a GitHub Repository via Jenkins
 Step 1: Set Up a New Jenkins Job for GitHub Project 
1.Go to Jenkins Dashboard â†’ Click New Item. 
2. Enter a project name â†’ Select Freestyle Project. 
3. Click OK. 
Step 2: Configure Git Repository in Jenkins
 1. Under Source Code Management, select Git.
 2. Enter your GitHub repository URL (e.g., https://github.com/your-repo-name.git ). 
 3. Select the Git credentials configured earlier. 
Step 3: Add Build Step for Maven 
1. Scroll to Build â†’ Click Add build step â†’ Execute Windows Batch Command.
2. Enter the Maven test command: 1 mvn test 2 
3. Click Save. 
Step 4: Trigger the Build 
1. Click Build Now to fetch the code from GitHub and execute the Selenium tests.
            	2. Check the Console Output to verify test execution.

